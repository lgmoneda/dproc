%name Muml;

%defs (
  structure A = Ast
);

%tokens

  : KW_let ("let") | KW_in ("in") | KW_end ("end")
  | KW_fn ("fn") | KW_fun ("fun") | KW_val ("val")
  | KW_if ("if") | KW_then ("then") | KW_else ("else")
  | KW_andalso ("andalso") | KW_orelse ("orelse")
  | CON_int of Int.int | CON_string of string 
  | ID of string | OP_UNI of string | OP_BIN of string | OP_
  | LP ("(") | RP (")") | COMMA (",") | SEMI (";")| COLON (":")
  | LB ("[") | RB ("]") | DOT (".") | CSV ("csv") | NAME ("name") | AP ("'")
  | ARROW ("=>") | TARROW ("->") | EQUAL ("=")
  ;

%start programa;

programa
  : %try declaracao SEMI corpo => ( A.Sequence(declaracao,corpo) );

declaracao
  : %try decvariavel SEMI declaracao => ( decvariavel :: declaracao)
  | %try decvariavel => ( [decvariavel] )
  ;

decvariavel
  : %try type ID  => (A.variavel(type , ID));

type  
  : %try KW_TAB => (A.tipo(KW_TAB))
  | %try KW_COL => (A.tipo(KW_COL))
  | %try KW_LIST => (A.tipo(KW_LIST))
  | %try KW_STRING => (A.tipo(KW_STRING))
  | %try KW_BOOL => (A.tipo(KW_BOOL))
  | %try KW_FLOAT => (A.tipo(KW_FLOAT))
  | %try KW_INT => (A.tipo(KW_INT))
  ;

corpo
  : %try cmd SEMI corpo => ( cmd :: corpo )
  | %try cmd SEMI => ([cmd])
  ;

cmd
  : %try KW_TAB EQUAL KW_LOAD LP  AP CON_string DOT CSV AP COMMA NAME EQUAL AP CON_string AP RP =>(Ap.atr(KW_TAB, KW_LOAD, CON_string, DOT, CSV, CON_string ))

  | %try KW_SAVE LP KW_TAB COMMA  AP CON_string DOT CSV AP RP =>(Ap.atr(KW_TAB, CON_string, DOT, CSV ))
  
  
  | %try KW_FLOAT EQUAL KW_MAX LP expCol RP =>(Ap.atr(KW_FLOAT , KW_MAX , expCol ))
  
  | %try KW_FLOAT EQUAL KW_MIN LP expCol RP =>(Ap.atr(KW_FLOAT , KW_MIN , expCol ))
  
  | %try KW_FLOAT EQUAL KW_AVG LP expCol RP =>(Ap.atr(KW_FLOAT , KW_AVG , expCol ))

  | %try expCol EQUAL KW_SOMA LP expCol COMMA expCol RP =>(Ap.atr(expCol , KW_SOMA , expCol, expCol ))

  | %try expCol EQUAL KW_SUB LP expCol COMMA expCol RP =>(Ap.atr(expCol , KW_SUB , expCol, expCol ))

  | %try expCol EQUAL KW_MUL LP expCol COMMA expCol RP =>(Ap.atr(expCol , KW_MUL , expCol, expCol ))
  
  | %try expCol EQUAL KW_DIV LP expCol COMMA expCol RP =>(Ap.atr(expCol , KW_DIV , expCol, expCol ))

  | %try KW_INSERT LP KW_TAB COMMA expCol COMMA AP CON_string AP RP =>(Ap.atr(KW_INSERT , KW_TAB , expCol, CON_string ))
  
expCol
  : KW_TAB LB AP CON_string AP RP => (Ap.tab(KW_TAB, CON_string))
  | KW_COL =>(Ap.col(KW_COL))
  ;

 

appExps
  : simpleExp+ =>
    (
      let
        fun apps(result, nil) = result
          | apps(result, hd :: tl) = A.App(apps(hd, tl), result)

        val simpleExpRev = List.rev simpleExp
      in
        apps(List.hd simpleExpRev, List.tl simpleExpRev)
      end
    )
  ;

simpleExp
  : CON_int => ( A.IntConstant(CON_int) )
  | CON_string => ( A.StringConstant(CON_string) )
  | ID => ( A.Variable(ref (A.create_symbol ID)) )
  | KW_let declist KW_in exp KW_end => ( A.LetIn(declist, exp) )
  | %try LP exp RP => ( exp )
  | %try LP exp COMMA explist RP => ( A.Tuple(exp :: explist) )
  | LP RP => ( A.Unit )
  ;

explist
  : %try exp COMMA explist => ( exp :: explist )
  | %try exp => ( [exp] )
  ;

fnArgs
  : LP RP => ( [] )
  | LP arglist RP => ( arglist )
  | ID => ( [A.Name(ref (A.create_symbol ID))] )
  ;

arglist
  : %try ID COMMA arglist => ( A.Name(ref (A.create_symbol ID)) :: arglist )
  | %try ID => ( [A.Name(ref (A.create_symbol ID))] )
  ;

declist
  : %try dec SEMI declist => ( dec :: declist )
  | %try dec => ( [dec] )
  ;

dec
  : KW_val valdec
  | KW_fun fundec
  ;

valdec
  : ID OP exp %where ( OP = "=" ) => ( A.Valdec(A.Name(ref (A.create_symbol ID)), false, exp) )
  ;

fundec
  : ID fnArgs OP exp %where ( OP = "=" ) => ( A.Valdec(A.Name(ref (A.create_symbol ID)), true, A.Fn(fnArgs, exp)) )
  ;
