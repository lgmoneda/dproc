%name Dproc;

%defs (
  structure A = Ast
);

%tokens

  : KW_if ("if") | KW_then ("then") | KW_else ("else")
  | CON_int of Int.int | CON_string of string 
  | ID of string | OP_UNI of string | OP_BIN of string | OP_
  | LP ("(") | RP (")") | COMMA (",") | SEMI (";")| COLON (":")
  | LB ("[") | RB ("]") | DOT (".") | CSV ("csv") | NAME ("name") | AP ("'")
  | EQUAL ("=")
  ;

%start programa;

programa
  : %try declaracao SEMI corpo => ( A.Sequence(declaracao,corpo) );

declaracao
  : %try decvariavel SEMI declaracao => ( decvariavel :: declaracao)
  | %try decvariavel => ( [decvariavel] )
  ;

decvariavel
  : %try type ID  => (A.variavel(type , ID));

type  
  : %try KW_TAB => (A.tipo(KW_TAB))
  | %try KW_COL => (A.tipo(KW_COL))
  | %try KW_LIST => (A.tipo(KW_LIST))
  | %try KW_STRING => (A.tipo(KW_STRING))
  | %try KW_BOOL => (A.tipo(KW_BOOL))
  | %try KW_FLOAT => (A.tipo(KW_FLOAT))
  | %try KW_INT => (A.tipo(KW_INT))
  ;

corpo
  : %try cmd SEMI corpo => ( cmd :: corpo )
  | %try cmd SEMI => ([cmd])
  ;

cmd
  : %try ID EQUAL KW_LOAD expParam => (A.atr(KW_TAB, KW_LOAD, expParam))
  | %try KW_SAVE expParam =>(A.cmd(KW_SAVE, expParam))
  | %try KW_INSERT expParam =>(A.cmd(KW_INSERT , expParam))
  | %try ID EQUAL KW_MAX expParam =>(A.atr(ID , KW_MAX , expParam))
  | %try ID EQUAL KW_MIN expParam =>(A.atr(ID , KW_MIN , expParam))
  | %try ID EQUAL KW_AVG expParam =>(A.atr(ID , KW_AVG , expParam))
  | %try ID EQUAL KW_SOMA expParam =>(A.atr(expCol , KW_SOMA , expParam))
  | %try ID EQUAL KW_SUB expParam  =>(A.atr(expCol , KW_SUB , expParam))
  | %try ID EQUAL KW_MUL expParam  =>(A.atr(expCol , KW_MUL , expParam))
  | %try ID EQUAL KW_DIV expParam  =>(A.atr(expCol , KW_DIV , expParam))
  ;




expParam
  : %try LP  AP CON_string DOT CSV AP COMMA NAME EQUAL AP CON_string AP RP => (A.paramquart( CON_string, DOT, CSV, CON_string))
  | %try  LP KW_TAB COMMA  AP CON_string DOT CSV AP RP =>(A.paramquart(KW_TAB, CON_string, DOT, CSV ))
  | %try LP expCol RP =>(A.paramum(expCol))
  | %try LP expCol COMMA expCol RP =>(A.paramdob(expCol, expCol))
  | %try LP KW_TAB COMMA expCol COMMA AP CON_string AP RP =>(A.paramtre(KW_TAB , expCol, CON_string));


expCol
  : KW_TAB LB AP CON_string AP RP => (A.tab(KW_TAB, CON_string))
  | KW_COL =>(A.col(KW_COL))
  ;

 appExps
  : simpleExp+ =>
    (
      let
        fun apps(result, nil) = result
          | apps(result, hd :: tl) = A.App(apps(hd, tl), result)

        val simpleExpRev = List.rev simpleExp
      in
        apps(List.hd simpleExpRev, List.tl simpleExpRev)
      end
    )
  ;

opExp
  : %try appExps OP opExp => ( A.InfixApp(appExps, OP, opExp) )
  | %try appExps
;

simpleExp
  : CON_int => ( A.IntConstant(CON_int) )
  | CON_string => ( A.StringConstant(CON_string) )
  | ID => ( A.Variable(ref (A.create_symbol ID)) )
  | %try LP exp RP => ( exp )
  ;




(*explist
  : %try exp COMMA explist => ( exp :: explist )
  | %try exp => ( [exp] )
  ;
*)
(*fnArgs
  : LP RP => ( [] )
  | LP arglist RP => ( arglist )
  | ID => ( [A.Name(ref (A.create_symbol ID))] )
  ;

arglist
  : %try ID COMMA arglist => ( A.Name(ref (A.create_symbol ID)) :: arglist )
  | %try ID => ( [A.Name(ref (A.create_symbol ID))] )
  ;

declist
  : %try dec SEMI declist => ( dec :: declist )
  | %try dec => ( [dec] )
  ;

dec
  : KW_val valdec
  | KW_fun fundec
  ;

valdec
  : ID OP exp %where ( OP = "=" ) => ( A.Valdec(A.Name(ref (A.create_symbol ID)), false, exp) )
  ;

fundec
  : ID fnArgs OP exp %where ( OP = "=" ) => ( A.Valdec(A.Name(ref (A.create_symbol ID)), true, A.Fn(fnArgs, exp)) )
  ;
*)